SETUP GUIDE

	First Install Docker, Docker-compose, wget, curl, and zip if needed
-	Put the project files in 
[ec2-user@ip-172-31-39-253 ~]$ git clone https://github.com/heythatisz00/test_site2.git
Cloning into 'test_site2'...
remote: Enumerating objects: 47, done.
remote: Counting objects: 100% (47/47), done.
remote: Compressing objects: 100% (37/37), done.
remote: Total 47 (delta 2), reused 47 (delta 2), pack-reused 0
Unpacking objects: 100% (47/47), done.



-	Give permission to the Jenkins data folder and the app folder like this:  
-	chown -R 1000:1000 jenkins_data
-	chown -R 1000:1000 app
-	 Bring all the services up with the next command:


-	docker-compose-Linux-x86_64.sha256  test_site2
-	[ec2-user@ip-172-31-41-137 ~]$ docker-compose up -d

se up --build`.
-	Creating apache  ... done
-	Creating php     ... done
-	Creating mysql   ... done
-	Creating jenkins ... done


-	Go to the browser, and open Jenkins:  http://3.22.167.124:8080/

 

-	To get the administrator password, go to the terminal and run this command:

1.	  docker logs Jenkins >> copy dashboard encryption key

Jenkins initial setup is required. An admin user has been created and a password generated.
Please use the following password to proceed to installation:

b504008dbc9043fc937ee8e158cf2dd0

This may also be found at: /var/jenkins_home/secrets/initialAdminPassword



           The red string above in the administrator password, copy that and paste in the browser.
 	 
            And click “continue” button below.
Select  “install suggested plugins”

 

Wait for the process to finish.

 
Fill out the form with user information

 
Click on “Save and continue ” button below
 

Click on “Save and finish” button.

 

Click on “Start using Jenkins”.

 

-	Select create “new job” and choose Freestyle Project

 

In Source Code management select Repository URL:  https://github.com/heythatisz00/site_2

 





Select “Github hook trigger for GITScm polling”

 

In BUIL section select “Add build step” -> “Execute shell”

 

In execute shell area add the following code:

DESTINATION_PATH=/app
RSYNC_PARAMS='-rl --del --exclude=.git --exclude rsync.log --log-file=rsync.log '
rm -Rf /app/*
# deploy sources
eval rsync $RSYNC_PARAMS ./ $DESTINATION_PATH



It should look like this:

 


Set-Up the proper webhook in the Github repository:

 

By now, you should be able to push code changes to the repo and see Jenkins automatically trigger the job:


On your gitbash and VS code make the necessary changes like I did for example >>
$ git status

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        guide.docx

$ git add .

$ git commit -m "new guide doc added"

$ git push -f github master

$ git status
On branch master
nothing to commit, working tree clean

Now check github UI for the commit confirmation >>
 


Go to Jenkins UI On the console output of the trigger job you should look for something like this:
 


In the server you should be able to look for the change in the app folder like this, and then use cat, nano or another editor to check if the change is there, like I did before:



